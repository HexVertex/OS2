/* pagetables -- A framework to experiment with page tables
 *
 *    tracereader.h - Class to read valgrind "lackey" memory traces.
 *
 * Copyright (C) 2017  Leiden University, The Netherlands.
 */

#ifndef __TRACEREADER_H__
#define __TRACEREADER_H__

#include <string>
#include <fstream>
#include <stdexcept>

#include <stdint.h>

enum class MemAccessType
{
  Instr,
  Store,
  Load,
  /* According to the Lackey documentation, a Modify is generated by
   * an instruction that modifies a memory value in place. For example,
   * this is done by "incl (%ecx)".
   */
  Modify
};

struct MemAccess
{
  MemAccessType type;
  uint64_t      addr;
  uint8_t       size;
};

std::ostream &operator<<(std::ostream &stream, const MemAccess &access);


class TraceReader
{
  private:
    std::istream &input;
    int lineno;
    bool eofflag;
    MemAccess currentAccess;

    void parseType(const std::string &str, MemAccess &access);
    bool parseLine(const std::string &line, MemAccess &access);
    void parseToNextAccess(void);

  public:
    TraceReader(std::istream &input);

    bool eof(void) const noexcept { return eofflag; }

    TraceReader &operator>>(MemAccess &access);
};


class TraceFileParseError : public std::runtime_error
{
  public:
    TraceFileParseError()
      : std::runtime_error("Error while parsing memory trace file")
    { }

    TraceFileParseError(const std::string &err)
      : std::runtime_error(std::string("Error while parsing memory trace file: ") + err)
    { }

    TraceFileParseError(const int lineno, const std::string &err)
      : std::runtime_error(std::string("Error while parsing memory trace file: ") +
                           std::string("line ") + std::to_string(lineno) +
                           std::string(": ") + err)
    { }
};

#endif /* __TRACEREADER_H__ */
